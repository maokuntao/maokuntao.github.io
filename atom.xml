<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[taomk's note]]></title>
  <subtitle><![CDATA[陶茂坤的个人博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://taomaokun.github.io/"/>
  <updated>2016-01-15T13:47:18.000Z</updated>
  <id>http://taomaokun.github.io/</id>
  
  <author>
    <name><![CDATA[<a href=mailto:taomaokun@foxmail.com>陶茂坤</a>]]></name>
    <email><![CDATA[taomaokun@foxmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[嘿嘿嘿]]></title>
    <link href="http://taomaokun.github.io/2016/01/14/%E7%8E%B0%E5%9C%A8%E7%9A%84%E5%BF%83%E6%83%85/"/>
    <id>http://taomaokun.github.io/2016/01/14/现在的心情/</id>
    <published>2016-01-14T10:02:07.000Z</published>
    <updated>2016-01-15T13:47:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u73B0_u5728_u7684_u5FC3_u60C5_uFF1A"><a href="#u73B0_u5728_u7684_u5FC3_u60C5_uFF1A" class="headerlink" title="现在的心情："></a>现在的心情：</h3><ul>
<li>taomk: 我现在很开心呢，你呢，傻宝贝儿？</li>
<li>bll: 我也很开心呢</li>
<li>all: 我们都很开心呢</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u73B0_u5728_u7684_u5FC3_u60C5_uFF1A"><a href="#u73B0_u5728_u7684_u5FC3_u60C5_uFF1A" class="headerlink" title="现在的心情："></a>现在的心情：</h3]]>
    </summary>
    
      <category term="😄" scheme="http://taomaokun.github.io/tags/%F0%9F%98%84/"/>
    
      <category term="😊" scheme="http://taomaokun.github.io/tags/%F0%9F%98%8A/"/>
    
      <category term="杂七杂八" scheme="http://taomaokun.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java.util.Queue<E>源码阅读]]></title>
    <link href="http://taomaokun.github.io/2016/01/14/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%B5%8B%E8%AF%95/"/>
    <id>http://taomaokun.github.io/2016/01/14/代码片段测试/</id>
    <published>2016-01-14T10:02:07.000Z</published>
    <updated>2016-01-15T06:59:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="java-util-Queue"><a href="#java-util-Queue" class="headerlink" title="java.util.Queue"></a>java.util.Queue<e></e></h1><blockquote>
<p>A collection designed for holding elements prior to processing.  </p>
</blockquote>
<p>Besides basic <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Collection.html" target="_blank" rel="external"><strong>Collection</strong></a> operations, queues provide additional insertion, extraction, and inspection operations.<br>Each of these methods exists in two forms:    </p>
<ul>
<li>one throws an exception if the operation fails  </li>
<li>the other returns a special value (either null or false, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted Queue implementations; in most implementations, insert operations cannot fail.<br><img src="http://i4.tietuku.com/6d89a06b38a8760ds.png" alt="Summary of Queue methods"></li>
</ul>
<p>Queues typically, but do not necessarily, order elements in a <strong>FIFO</strong> (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements’ natural ordering, and <strong>LIFO</strong> queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the <em>head</em> of the queue is that element which would be removed by a call to <strong>remove()</strong> or <strong>poll()</strong>. In a FIFO queue, all new elements are inserted at the tail of the queue. Other kinds of queues may use different placement rules. Every Queue implementation must specify its ordering properties.</p>
<hr>
<p>The <em>offer</em> method inserts an element if possible, otherwise returning false. This differs from the <em>Collection.add</em> method, which can fail to add an element only by throwing an unchecked exception.The <em>offer</em> method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or “bounded”) queues.</p>
<p>The <em>remove()</em> and <em>poll()</em> methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue’s ordering policy, which differs from implementation to implementation. The remove() and poll() methods differ only in their behavior when the queue is empty: the remove() method throws an exception, while the poll() method returns null.</p>
<p>The <em>element()</em> and <em>peek()</em> methods return, but do not remove, the head of the queue.</p>
<p>The <strong>Queue</strong> interface does not define the blocking queue methods, which are common in concurrent programming. These methods, which wait for elements to appear or for space to become available, are defined in the <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/BlockingQueue.html" target="_blank" rel="external">java.util.concurrent.BlockingQueue</a> interface, which extends this interface.</p>
<p><strong>Queue</strong> implementations generally do not allow insertion of <em>null</em> elements, although some implementations, such as <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/LinkedList.html" target="_blank" rel="external">LinkedList</a>, do not prohibit insertion of <em>null</em>. Even in the implementations that permit it, null should not be inserted into a Queue, as null is also used as a special return value by the <em>poll</em> method to indicate that the queue contains no elements.</p>
<p><strong>Queue</strong> implementations generally do not define element-based versions of methods <em>equals</em> and <em>hashCode</em> but instead inherit the identity based versions from class <em>Object</em>, because element-based equality is not always well-defined for queues with the same elements but different ordering properties.</p>
<p>This interface is a member of the <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/collections/index.html" target="_blank" rel="external">Java Collections Framework</a>.</p>
<p><strong><em>Type Parameters</em></strong>:</p>
<p><e> the type of elements held in this collection<br><strong><em>Since</em></strong>:1.5<br><strong><em>Author</em></strong>:Doug Lea<br><strong><em>See Also</em></strong>:  </e></p>
<ul>
<li>java.util.Collection</li>
<li>LinkedList</li>
<li>PriorityQueue</li>
<li>java.util.concurrent.LinkedBlockingQueue</li>
<li>java.util.concurrent.BlockingQueue</li>
<li>java.util.concurrent.ArrayBlockingQueue</li>
<li>java.util.concurrent.LinkedBlockingQueue</li>
<li>java.util.concurrent.PriorityBlockingQueue</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="java-util-Queue"><a href="#java-util-Queue" class="headerlink" title="java.util.Queue"></a>java.util.Queue<e></e></h1><blockquote>
<]]>
    </summary>
    
      <category term="java" scheme="http://taomaokun.github.io/tags/java/"/>
    
      <category term="jdk" scheme="http://taomaokun.github.io/tags/jdk/"/>
    
      <category term="Java源码阅读" scheme="http://taomaokun.github.io/categories/Java%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
